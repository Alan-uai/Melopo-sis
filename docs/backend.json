{
  "entities": {
    "Poem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Poem",
      "type": "object",
      "description": "Represents a poem created and saved by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the poem."
        },
        "title": {
          "type": "string",
          "description": "The title of the poem."
        },
        "authorId": {
          "type": "string",
          "description": "Reference to User who created the poem. (Relationship: User 1:N Poem)"
        },
        "text": {
          "type": "string",
          "description": "The complete text content of the poem."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the poem was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the poem was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "authorId",
        "text",
        "createdAt",
        "updatedAt"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Verso Correto application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "username": {
          "type": "string",
          "description": "The username chosen by the user."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "email",
        "username",
        "createdAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. The `userId` parameter corresponds to the Firebase Auth UID.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user, matching their Firebase Auth UID."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/poems/{poemId}",
        "definition": {
          "entityName": "Poem",
          "schema": {
            "$ref": "#/backend/entities/Poem"
          },
          "description": "Stores poems created by a specific user.  The `authorId` field in the Poem document is used for clarity, mirroring the {userId} path parameter.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who owns the poem."
            },
            {
              "name": "poemId",
              "description": "The unique identifier for the poem."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure Authorization Independence, support required QAPs (Queries are not Filters), and maintain data integrity for the Verso Correto application. Poems are stored as subcollections of users, which simplifies access control and ensures that each poem is owned by a specific user. This structure facilitates easy querying of a user's poems and avoids the need for complex security rules that rely on `get()` calls.\n\n*   **Authorization Independence:** Poems are stored as subcollections of users (`/users/{userId}/poems/{poemId}`), enabling direct access control based on the user ID (`request.auth.uid`). The `authorId` field in the `Poem` document is redundant in terms of authorization given the path, but it's kept for data clarity and potential future use cases (e.g., if poems were ever to be moved to a different location).\n*   **QAPs (Queries are not Filters):** The structure supports secure `list` operations.  Listing poems under a specific user path `/users/{userId}/poems` is straightforward and secure, as the rules can simply check if `request.auth.uid == userId`.\n*   **Data Integrity:** Timestamps (`createdAt`, `updatedAt`) are included to track poem creation and modification times. The `authorId` links back to the owning user, which can be verified on creation.\n"
  }
}